let ws;
let xSize, ySize, mineCount;
let timer;
let startTime;
let gameOver = false;
// Áî®‰∫éÂ≠òÂÇ®Êú™Â§ÑÁêÜÂÆåÁöÑÊ∂àÊÅØÈìæ
const messageBuffers = new Map();

document.addEventListener('contextmenu', (e) => e.preventDefault());

document.getElementById('start').addEventListener('click', () => {
    xSize = parseInt(document.getElementById('x').value);
    ySize = parseInt(document.getElementById('y').value);
    mineCount = parseInt(document.getElementById('num').value);

    document.getElementById('mine-count').textContent = `Ââ©‰ΩôÂú∞Èõ∑: ${mineCount}`;

    ws = new WebSocket('ws://localhost:8001/ws');

    ws.onopen = () => {
        startTime = Date.now();
        timer = setInterval(updateTimer, 1000);
        ws.send(JSON.stringify({
            type: 0,
            id: 'sss',
            payload: { x: xSize, y: ySize, num: mineCount }
        }));

        document.getElementById('config').style.display = 'none';
        document.getElementById('game').style.display = 'block';

        createBoard();
    };
    // ‰øùÁïôËøô‰∏Ä‰∏™ ws.onmessage ÂÆö‰πâ
    ws.onmessage = (e) => {
        const msg = JSON.parse(e.data);
        console.log('Êé•Êî∂Âà∞Ê∂àÊÅØ:', msg); // ÊâìÂç∞Êé•Êî∂Âà∞ÁöÑÊ∂àÊÅØ
        switch (msg.type) {
            case 16: // TypeResult
                console.log('ÂºÄÂßãÂ§ÑÁêÜ TypeResult Ê∂àÊÅØ'); // ÊâìÂç∞ÂºÄÂßãÂ§ÑÁêÜÊ∂àÊÅØÁöÑÊó•Âøó
                handleResult(msg.payload);
                break;
            case 17: // TypeBoom
                console.log('ÂºÄÂßãÂ§ÑÁêÜ TypeBoom Ê∂àÊÅØ'); // ÊâìÂç∞ÂºÄÂßãÂ§ÑÁêÜÊ∂àÊÅØÁöÑÊó•Âøó
                handleBoom(msg.payload);
                break;
            default:
                // console.log('Êú™Áü•Ê∂àÊÅØÁ±ªÂûã:', msg.type);
        }
    };
    ws.onclose = () => {
        clearInterval(timer);
        if (!gameOver) {
            document.getElementById('game-status').textContent = 'ËøûÊé•Â∑≤Êñ≠ÂºÄ';
        }
    };
});

function createBoard() {
    const board = document.getElementById('board');
    board.style.gridTemplateColumns = `repeat(${xSize}, 30px)`;
    board.innerHTML = '';
    const coordsElement = document.getElementById('coords');

    for (let y = 0; y < ySize; y++) {
        for (let x = 0; x < xSize; x++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.dataset.x = x;
            cell.dataset.y = y;
            cell.dataset.flagged = 'false';
            cell.dataset.revealed = 'false';

            cell.addEventListener('mousedown', (e) => {
                if (gameOver) return;

                e.preventDefault();
                const isLeftClick = e.button === 0;
                sendClick(x, y, isLeftClick);
            });

            cell.addEventListener('mouseover', () => {
                coordsElement.textContent = `ÂùêÊ†á: (${x}, ${y})`;
            });

            cell.addEventListener('mouseout', () => {
                coordsElement.textContent = 'ÂùêÊ†á: (0, 0)';
            });

            board.appendChild(cell);
        }
    }
}

function sendClick(x, y, isLeftClick) {
    const message = {
        type: 15,
        id: 'sss',
        payload: {
            x: x,
            y: y,
            click: isLeftClick
        }
    };
    console.log('ÂèëÈÄÅÊ∂àÊÅØ:', message); // ÊâìÂç∞ÂèëÈÄÅÁöÑÊ∂àÊÅØ
    ws.send(JSON.stringify(message));
}


function handleResult(payload) {
    console.log('Â§ÑÁêÜ TypeResult Ê∂àÊÅØÁöÑ payload:', payload); // ÊâìÂç∞Â§ÑÁêÜÁöÑ payload
    const { msgid, x, y, num, end } = payload;
    // Â¶ÇÊûúÊ∂àÊÅØÈìæ‰∏çÂ≠òÂú®ÔºåÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÊï∞ÁªÑÊù•Â≠òÂÇ®Ê∂àÊÅØ
    if (!messageBuffers.has(msgid)) {
        messageBuffers.set(msgid, []);
    }
    const buffer = messageBuffers.get(msgid);
    buffer.push({ x, y, num });

    // ÂΩì isEnd ‰∏∫ true Êó∂ÔºåËØ¥ÊòéÊ∂àÊÅØÈìæÂÆåÁªìÔºåÊ∏≤ÊüìÊâÄÊúâÂ≠òÂÇ®ÁöÑÂçïÂÖÉÊ†º
    if (end) {
        console.log('TypeResult Ê∂àÊÅØÈìæÂÆåÁªìÔºåÂºÄÂßãÊ∏≤ÊüìÂçïÂÖÉÊ†º'); // ÊâìÂç∞Ê∂àÊÅØÈìæÂÆåÁªìÁöÑÊó•Âøó
        renderCells(buffer);
        messageBuffers.delete(msgid);
        checkWin();
    }
}

function handleBoom(payload) {
    console.log('Â§ÑÁêÜ TypeBoom Ê∂àÊÅØÁöÑ payload:', payload); // ÊâìÂç∞Â§ÑÁêÜÁöÑ payload
    gameOver = true;
    clearInterval(timer);
    document.getElementById('game-status').textContent = 'Ê∏∏ÊàèÁªìÊùüÔºå‰Ω†Ë∏©Âà∞Âú∞Èõ∑‰∫ÜÔºÅ';
    renderCells([payload]);
}

function renderCells(cells) {
    cells.forEach((cellData) => {
        const cell = document.querySelector(`.cell[data-x="${cellData.x}"][data-y="${cellData.y}"]`);
        if (!cell) return;

        if (cellData.num === 15) { // model.Flag
            cell.dataset.flagged = 'true';
            cell.textContent = 'üö©';
            cell.classList.add('flagged');
        } else if (cellData.num === 16) { // model.Unknown
            cell.dataset.flagged = 'false';
            cell.dataset.revealed = 'false';
            cell.textContent = '';
            cell.classList.remove('flagged');
            cell.classList.remove('revealed');
        } else {
            cell.dataset.flagged = 'false';
            cell.dataset.revealed = 'true';
            cell.classList.remove('flagged');
            cell.classList.add('revealed');

            switch (cellData.num) {
                case 0:
                    cell.textContent = '';
                    break;
                case 10:
                    cell.textContent = 'üí£';
                    cell.classList.add('mine');
                    break;
                default:
                    cell.textContent = cellData.num;
            }
        }
    });
}

function checkWin() {
    const unrevealedCells = document.querySelectorAll('.cell:not([data-revealed="true"]):not([data-flagged="true"])');
    if (unrevealedCells.length === 0) {
        gameOver = true;
        clearInterval(timer);
        document.getElementById('game-status').textContent = 'ÊÅ≠Âñú‰Ω†ÔºåÊ∏∏ÊàèËÉúÂà©ÔºÅ';
    }
}

function updateTimer() {
    const elapsed = Math.floor((Date.now() - startTime) / 1000);
    document.getElementById('timer').textContent = `Áî®Êó∂: ${elapsed} Áßí`;
}
