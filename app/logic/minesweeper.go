package logic

import (
	"math/rand/v2"

	"github.com/gogf/gf/errors/gerror"
)

// CreateMap generates a minesweeper board with the given dimensions and number of mines.
// Parameters:
//
//	x - number of rows
//	y - number of columns
//	n - number of mines
//
// Returns:
//
//	A pointer to a 2D boolean array, where true indicates a mine and false indicates an empty cell.
//	An error if the number of mines exceeds the board size.
func CreateRealMap(x uint, y uint, n uint) (*[][]bool, error) {
	// Check if the dimensions are greater than zero
	if x == 0 || y == 0 {
		return nil, gerror.New("board dimensions must be greater than zero")
	}
	// Check if the number of mines is greater than zero
	if n == 0 {
		return nil, gerror.New("number of mines must be greater than zero")
	}
	// Check if the number of mines exceeds the total number of cells
	if n > x*y {
		return nil, gerror.New("number of mines exceeds board size")
	}

	// Create a 2D slice with the specified dimensions
	board := make([][]bool, y)
	for i := range board {
		board[i] = make([]bool, x)
	}
	total := int(x * y)

	positions := make([]bool, total)

	for i := 0; i < int(n); i++ {
		positions[i] = true
	}

	rand.Shuffle(total, func(i, j int) {
		positions[i], positions[j] = positions[j], positions[i]
	})

	for i := 0; i < total; i++ {
		row := i / int(x)
		col := i % int(x)

		board[row][col] = positions[i]
	}

	for i := 0; i < int(y); i++ {
		for j := 0; j < int(x); j++ {
			print(" ", board[i][j])
		}
		println()
	}
	return &board, nil
}

// GetUserMap is a placeholder function that should return a client view of the map.
// Parameters:
//
// Realmap - a pointer to the real map generated by CreateRealMap
//
// Returns:
//
// A pointer to a 2D byte array representing the client view of the map.
// Currently returns nil as a placeholder.

func GetUserMap(Realmap *[][]bool) *[][]byte {
	return nil
}

func HandleLeftClick(x, y uint) {

}

func HandleRightClick(x, y uint) {

}
